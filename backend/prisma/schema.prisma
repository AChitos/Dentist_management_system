// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(STAFF)
  specialization String?
  phone         String?
  avatar        String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  appointments  Appointment[]
  treatments   Treatment[]
  medicalRecords MedicalRecord[]
  billing      Billing[]
  auditLogs    AuditLog[]
  payments     Payment[]
  inventoryTransactions InventoryTransaction[]

  @@map("users")
}

model Patient {
  id              String    @id @default(cuid())
  patientId       String    @unique // Medical record number
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          Gender
  email           String?
  phone           String
  address         String?
  city            String?
  state           String?
  zipCode         String?
  emergencyContact String?
  emergencyPhone  String?
  insuranceProvider String?
  insuranceNumber String?
  medicalHistory  String?
  allergies       String?
  medications     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  appointments    Appointment[]
  treatments     Treatment[]
  medicalRecords MedicalRecord[]
  billing        Billing[]
  documents      Document[]

  @@map("patients")
}

model Appointment {
  id          String        @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  startTime   String
  endTime     String
  duration    Int           // in minutes
  type        AppointmentType
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  reminderSent Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  patient     Patient       @relation(fields: [patientId], references: [id])
  doctor      User          @relation(fields: [doctorId], references: [id])

  @@map("appointments")
}

model Treatment {
  id              String        @id @default(cuid())
  patientId       String
  doctorId        String
  name            String
  description     String?
  category        TreatmentCategory
  status          TreatmentStatus @default(PLANNED)
  plannedDate     DateTime?
  completedDate   DateTime?
  cost            Decimal       @db.Decimal(10, 2)
  insuranceCoverage Decimal?    @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  patient         Patient       @relation(fields: [patientId], references: [id])
  doctor          User          @relation(fields: [doctorId], references: [id])
  medicalRecords  MedicalRecord[]

  @@map("treatments")
}

model MedicalRecord {
  id          String    @id @default(cuid())
  patientId   String
  doctorId    String
  treatmentId String?
  date        DateTime  @default(now())
  diagnosis   String?
  symptoms    String?
  examination String?
  treatment   String?
  prescription String?
  followUp    DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  patient     Patient   @relation(fields: [patientId], references: [id])
  doctor      User      @relation(fields: [doctorId], references: [id])
  treatment   Treatment? @relation(fields: [treatmentId], references: [id])

  @@map("medical_records")
}

model Billing {
  id              String        @id @default(cuid())
  patientId       String
  doctorId        String
  treatmentId     String?
  appointmentId   String?
  amount          Decimal       @db.Decimal(10, 2)
  insuranceAmount Decimal?      @db.Decimal(10, 2)
  patientAmount   Decimal       @db.Decimal(10, 2)
  status          BillingStatus @default(PENDING)
  dueDate         DateTime?
  paidDate        DateTime?
  paidAmount      Decimal?      @db.Decimal(10, 2) @default(0)
  lastPaymentDate DateTime?
  paymentMethod   PaymentMethod?
  invoiceNumber   String?       @unique
  reference       String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  patient         Patient       @relation(fields: [patientId], references: [id])
  doctor          User          @relation(fields: [doctorId], references: [id])
  payments        Payment[]

  @@map("billing")
}

model Inventory {
  id              String    @id @default(cuid())
  name            String
  category        String
  description     String?
  quantity        Int
  minQuantity     Int        @default(5)
  unit            String
  cost            Decimal   @db.Decimal(10, 2)
  supplier        String?
  supplierContact String?
  lastRestocked   DateTime?
  expiryDate      DateTime?
  location        String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  inventoryTransactions InventoryTransaction[]

  @@map("inventory")
}

model Document {
  id          String    @id @default(cuid())
  patientId   String
  name        String
  type        DocumentType
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedBy  String
  uploadedAt  DateTime  @default(now())
  description String?

  // Relations
  patient     Patient   @relation(fields: [patientId], references: [id])

  @@map("documents")
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String
  action      String
  tableName   String
  recordId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Payment {
  id            String        @id @default(cuid())
  billingId     String
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime
  reference     String?
  notes         String?
  recordedBy    String
  createdAt     DateTime      @default(now())

  // Relations
  billing       Billing       @relation(fields: [billingId], references: [id], onDelete: Cascade)
  recordedByUser User         @relation("PaymentRecorder", fields: [recordedBy], references: [id])

  @@map("payments")
}

model InventoryTransaction {
  id               String    @id @default(cuid())
  inventoryId      String
  type             String    // "IN" or "OUT"
  quantity         Int
  reason           String
  notes            String?
  recordedBy       String
  previousQuantity Int
  newQuantity      Int
  timestamp        DateTime  @default(now())

  // Relations
  inventory        Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  recordedByUser   User      @relation("InventoryTransactionRecorder", fields: [recordedBy], references: [id])

  @@map("inventory_transactions")
}

// Enums
enum UserRole {
  ADMIN
  DOCTOR
  STAFF
  RECEPTIONIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AppointmentType {
  CONSULTATION
  CLEANING
  FILLING
  EXTRACTION
  ROOT_CANAL
  CROWN
  BRIDGE
  IMPLANT
  ORTHODONTICS
  EMERGENCY
  FOLLOW_UP
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TreatmentCategory {
  PREVENTIVE
  RESTORATIVE
  SURGICAL
  ORTHODONTIC
  COSMETIC
  EMERGENCY
  DIAGNOSTIC
}

enum TreatmentStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum BillingStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  INSURANCE
  CHECK
  BANK_TRANSFER
}

enum DocumentType {
  X_RAY
  PHOTO
  SCAN
  REPORT
  CONSENT_FORM
  MEDICAL_HISTORY
  INSURANCE_FORM
  OTHER
}
